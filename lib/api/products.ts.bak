import { supabase } from '@/lib/supabase-client';
import { Product } from '@/lib/types/database';

export interface FetchProductsOptions {
  limit?: number;
  offset?: number;
  orderBy?: 'created_at' | 'name' | 'updated_at';
  order?: 'asc' | 'desc';
  category?: string;
  tag?: string;
  search?: string;
  status?: string;
}

export async function fetchProducts(options: FetchProductsOptions = {}) {
  const {
    limit = 20,
    offset = 0,
    orderBy = 'created_at',
    order = 'desc',
    category,
    tag,
    search,
    status
  } = options;

  let query = supabase
    .from('products')
    .select(`
      *,
      profiles:submitter_id (
        id,
        username,
        avatar_url,
        bio
      ),
      product_categories (
        category_id,
        categories (
          id,
          name,
          slug
        )
      ),
      product_tags (
        tag_id,
        tags (
          id,
          name,
          slug
        )
      ),
      upvotes:upvotes(count)
    `)
    .order(orderBy, { ascending: order === 'asc' })
    .range(offset, offset + limit - 1);

  // Add filters
  if (search) {
    query = query.or(`name.ilike.%${search}%,tagline.ilike.%${search}%,description.ilike.%${search}%`);
  }

  if (status) {
    query = query.eq('status', status as any);
  }

  if (category) {
    // Filter by category slug
    const { data: categoryData } = await supabase
      .from('categories')
      .select('id')
      .eq('slug', category)
      .single();

    if (categoryData) {
      const { data: productIds } = await supabase
        .from('product_categories')
        .select('product_id')
        .eq('category_id', categoryData.id);

      if (productIds && productIds.length > 0) {
        const ids = productIds.map(item => item.product_id);
        query = query.in('id', ids);
      }
    }
  }

  if (tag) {
    // Filter by tag slug
    const { data: tagData } = await supabase
      .from('tags')
      .select('id')
      .eq('slug', tag)
      .single();

    if (tagData) {
      const { data: productIds } = await supabase
        .from('product_tags')
        .select('product_id')
        .eq('tag_id', tagData.id);

      if (productIds && productIds.length > 0) {
        const ids = productIds.map(item => item.product_id);
        query = query.in('id', ids);
      }
    }
  }

  const { data, error, count } = await query;

  if (error) {
    console.error('Error fetching products:', error);
    return { data: [], error, count: 0 };
  }

  // Process upvotes count
  const processedData = data?.map(product => ({
    ...product,
    upvote_count: product.upvotes?.[0]?.count || 0
  })) || [];

  return { data: processedData as Product[], error: null, count };
}

export async function fetchProductById(id: string) {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      profiles:submitter_id (
        id,
        username,
        avatar_url,
        bio,
        website_url,
        twitter_url,
        github_url,
        linkedin_url
      ),
      product_categories (
        category_id,
        categories (
          id,
          name,
          slug,
          description
        )
      ),
      product_tags (
        tag_id,
        tags (
          id,
          name,
          slug
        )
      ),
      upvotes:upvotes(count)
    `)
    .eq('id', id)
    .single();

  if (error) {
    console.error('Error fetching product:', error);
    return { data: null, error };
  }

  // Process upvotes count
  const processedData = {
    ...data,
    upvote_count: data.upvotes?.[0]?.count || 0
  };

  return { data: processedData as Product, error: null };
}

export async function fetchTrendingProducts() {
  // Get products with most upvotes in the last 30 days
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

  const { data: trendingIds } = await supabase
    .from('upvotes')
    .select('product_id, count:product_id.count()')
    .gte('created_at', thirtyDaysAgo.toISOString())
    .order('count', { ascending: false })
    .limit(10);

  if (!trendingIds || trendingIds.length === 0) {
    return fetchProducts({ limit: 10 });
  }

  const productIds = trendingIds.map(item => item.product_id);
  
  let query = supabase
    .from('products')
    .select(`
      *,
      profiles:submitter_id (
        id,
        username,
        avatar_url,
        bio
      ),
      product_categories (
        category_id,
        categories (
          id,
          name,
          slug
        )
      ),
      product_tags (
        tag_id,
        tags (
          id,
          name,
          slug
        )
      ),
      upvotes:upvotes(count)
    `)
    .in('id', productIds);

  const { data, error } = await query;

  if (error) {
    console.error('Error fetching trending products:', error);
    return { data: [], error };
  }

  // Process and sort by upvote count
  const processedData = data?.map(product => ({
    ...product,
    upvote_count: product.upvotes?.[0]?.count || 0
  })).sort((a, b) => b.upvote_count - a.upvote_count) || [];

  return { data: processedData as Product[], error: null };
}

export async function fetchProductsByUser(userId: string) {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_categories (
        category_id,
        categories (
          id,
          name,
          slug
        )
      ),
      product_tags (
        tag_id,
        tags (
          id,
          name,
          slug
        )
      ),
      upvotes:upvotes(count)
    `)
    .eq('submitter_id', userId)
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching user products:', error);
    return { data: [], error };
  }

  // Process upvotes count
  const processedData = data?.map(product => ({
    ...product,
    upvote_count: product.upvotes?.[0]?.count || 0
  })) || [];

  return { data: processedData as Product[], error: null };
}

export async function upvoteProduct(productId: string, userId: string) {
  const { data, error } = await supabase
    .from('upvotes')
    .insert({
      product_id: productId,
      user_id: userId
    });

  if (error && error.code === '23505') {
    // Duplicate key error - user already upvoted
    return { error: 'Already upvoted' };
  }

  return { data, error };
}

export async function removeUpvote(productId: string, userId: string) {
  const { error } = await supabase
    .from('upvotes')
    .delete()
    .eq('product_id', productId)
    .eq('user_id', userId);

  return { error };
}

export async function checkUserUpvoted(productId: string, userId: string) {
  const { data, error } = await supabase
    .from('upvotes')
    .select('*')
    .eq('product_id', productId)
    .eq('user_id', userId)
    .single();

  return { upvoted: !!data && !error, error };
}
